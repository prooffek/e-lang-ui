//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase, HttpContext } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IAttemptClient {
    addAttempt(attempt: AddAttemptDto): Observable<AttemptDto>;
    deleteAttempt(attemptId: string): Observable<FileResponse | null>;
    getAll(): Observable<AttemptDto[]>;
    getExercise(attemptId: string, flashcardStateId: string | null | undefined, isAnswerCorrect: boolean | null | undefined): Observable<NextExerciseDto>;
}

@Injectable({
    providedIn: 'root'
})
export class AttemptClient implements IAttemptClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    addAttempt(attempt: AddAttemptDto, httpContext?: HttpContext): Observable<AttemptDto> {
        let url_ = this.baseUrl + "/api/Attempt";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(attempt);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddAttempt(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddAttempt(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AttemptDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AttemptDto>;
        }));
    }

    protected processAddAttempt(response: HttpResponseBase): Observable<AttemptDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AttemptDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AttemptDto>(null as any);
    }

    deleteAttempt(attemptId: string, httpContext?: HttpContext): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Attempt";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(attemptId);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteAttempt(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteAttempt(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processDeleteAttempt(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(null as any);
    }

    getAll(httpContext?: HttpContext): Observable<AttemptDto[]> {
        let url_ = this.baseUrl + "/api/Attempt";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AttemptDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AttemptDto[]>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<AttemptDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AttemptDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AttemptDto[]>(null as any);
    }

    getExercise(attemptId: string, flashcardStateId: string | null | undefined, isAnswerCorrect: boolean | null | undefined, httpContext?: HttpContext): Observable<NextExerciseDto> {
        let url_ = this.baseUrl + "/api/Attempt/get-exercise?";
        if (flashcardStateId !== undefined && flashcardStateId !== null)
            url_ += "flashcardStateId=" + encodeURIComponent("" + flashcardStateId) + "&";
        if (isAnswerCorrect !== undefined && isAnswerCorrect !== null)
            url_ += "isAnswerCorrect=" + encodeURIComponent("" + isAnswerCorrect) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(attemptId);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetExercise(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetExercise(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NextExerciseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NextExerciseDto>;
        }));
    }

    protected processGetExercise(response: HttpResponseBase): Observable<NextExerciseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = NextExerciseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<NextExerciseDto>(null as any);
    }
}

export interface ICollectionClient {
    getCollectionCards(parentCollectionId: string | null | undefined): Observable<CollectionCardDto[]>;
    getCollection(collectionId: string | null | undefined): Observable<CollectionDto>;
    addCollection(collectionDto: CreateCollectionDto): Observable<CollectionDto>;
    updateCollection(collectionDto: UpdateCollectionDto): Observable<CollectionDto>;
    deleteCollection(collectionId: string | null | undefined): Observable<FileResponse | null>;
    getCollectionAutocompleteData(): Observable<CollectionAutocompleteDto[]>;
    getAll(): Observable<CollectionCardDto[]>;
}

@Injectable({
    providedIn: 'root'
})
export class CollectionClient implements ICollectionClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getCollectionCards(parentCollectionId: string | null | undefined, httpContext?: HttpContext): Observable<CollectionCardDto[]> {
        let url_ = this.baseUrl + "/api/Collection/collection-cards?";
        if (parentCollectionId !== undefined && parentCollectionId !== null)
            url_ += "parentCollectionId=" + encodeURIComponent("" + parentCollectionId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCollectionCards(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCollectionCards(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CollectionCardDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CollectionCardDto[]>;
        }));
    }

    protected processGetCollectionCards(response: HttpResponseBase): Observable<CollectionCardDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CollectionCardDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CollectionCardDto[]>(null as any);
    }

    getCollection(collectionId: string | null | undefined, httpContext?: HttpContext): Observable<CollectionDto> {
        let url_ = this.baseUrl + "/api/Collection/collection?";
        if (collectionId !== undefined && collectionId !== null)
            url_ += "collectionId=" + encodeURIComponent("" + collectionId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCollection(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCollection(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CollectionDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CollectionDto>;
        }));
    }

    protected processGetCollection(response: HttpResponseBase): Observable<CollectionDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CollectionDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CollectionDto>(null as any);
    }

    addCollection(collectionDto: CreateCollectionDto, httpContext?: HttpContext): Observable<CollectionDto> {
        let url_ = this.baseUrl + "/api/Collection/add-collection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(collectionDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddCollection(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddCollection(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CollectionDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CollectionDto>;
        }));
    }

    protected processAddCollection(response: HttpResponseBase): Observable<CollectionDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CollectionDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CollectionDto>(null as any);
    }

    updateCollection(collectionDto: UpdateCollectionDto, httpContext?: HttpContext): Observable<CollectionDto> {
        let url_ = this.baseUrl + "/api/Collection/update-collection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(collectionDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateCollection(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateCollection(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CollectionDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CollectionDto>;
        }));
    }

    protected processUpdateCollection(response: HttpResponseBase): Observable<CollectionDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CollectionDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CollectionDto>(null as any);
    }

    deleteCollection(collectionId: string | null | undefined, httpContext?: HttpContext): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Collection/delete-collection?";
        if (collectionId !== undefined && collectionId !== null)
            url_ += "collectionId=" + encodeURIComponent("" + collectionId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteCollection(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteCollection(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processDeleteCollection(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(null as any);
    }

    getCollectionAutocompleteData(httpContext?: HttpContext): Observable<CollectionAutocompleteDto[]> {
        let url_ = this.baseUrl + "/api/Collection/collection-autocomplete-data";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCollectionAutocompleteData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCollectionAutocompleteData(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CollectionAutocompleteDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CollectionAutocompleteDto[]>;
        }));
    }

    protected processGetCollectionAutocompleteData(response: HttpResponseBase): Observable<CollectionAutocompleteDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CollectionAutocompleteDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CollectionAutocompleteDto[]>(null as any);
    }

    getAll(httpContext?: HttpContext): Observable<CollectionCardDto[]> {
        let url_ = this.baseUrl + "/api/Collection";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CollectionCardDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CollectionCardDto[]>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<CollectionCardDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CollectionCardDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CollectionCardDto[]>(null as any);
    }
}

export interface IFlashcardClient {
    addOrUpdateFlashcard(flashcard: AddOrUpdateFlashcardDto): Observable<FlashcardDto>;
    deleteFlashcard(flashcardId: string | undefined): Observable<FileResponse | null>;
    deleteFlashcards(flashcardIds: string[] | undefined): Observable<FileResponse | null>;
    getAll(): Observable<FlashcardDto[]>;
}

@Injectable({
    providedIn: 'root'
})
export class FlashcardClient implements IFlashcardClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    addOrUpdateFlashcard(flashcard: AddOrUpdateFlashcardDto, httpContext?: HttpContext): Observable<FlashcardDto> {
        let url_ = this.baseUrl + "/api/Flashcard/add-or-update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(flashcard);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddOrUpdateFlashcard(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddOrUpdateFlashcard(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FlashcardDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FlashcardDto>;
        }));
    }

    protected processAddOrUpdateFlashcard(response: HttpResponseBase): Observable<FlashcardDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FlashcardDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FlashcardDto>(null as any);
    }

    deleteFlashcard(flashcardId: string | undefined, httpContext?: HttpContext): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Flashcard/remove-flashcard";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(flashcardId);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteFlashcard(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteFlashcard(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processDeleteFlashcard(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(null as any);
    }

    deleteFlashcards(flashcardIds: string[] | undefined, httpContext?: HttpContext): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Flashcard/remove-flashcards";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(flashcardIds);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteFlashcards(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteFlashcards(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processDeleteFlashcards(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(null as any);
    }

    getAll(httpContext?: HttpContext): Observable<FlashcardDto[]> {
        let url_ = this.baseUrl + "/api/Flashcard";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FlashcardDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FlashcardDto[]>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<FlashcardDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(FlashcardDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FlashcardDto[]>(null as any);
    }
}

export class AttemptDto implements IAttemptDto {
    id!: string;
    name!: string;
    collectionId!: string;
    collectionName!: string;
    createdOn!: Date;
    currentStage?: AttemptStageDto | undefined;
    maxFlashcardsPerStage!: number;
    maxQuizTypesPerFlashcard!: number;
    minCompletedQuizzesPerCent!: number;
    order!: FlashcardOrder;
    includeMeanings!: boolean;
    properties?: CustomPropertyDto[] | undefined;
    quizTypes?: QuizTypeDto[] | undefined;
    completedFlashcardsCount!: number;
    allFlashcardsCount!: number;
    lastSeenOn?: Date | undefined;

    constructor(data?: IAttemptDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.collectionId = _data["collectionId"];
            this.collectionName = _data["collectionName"];
            this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : <any>undefined;
            this.currentStage = _data["currentStage"] ? AttemptStageDto.fromJS(_data["currentStage"]) : <any>undefined;
            this.maxFlashcardsPerStage = _data["maxFlashcardsPerStage"];
            this.maxQuizTypesPerFlashcard = _data["maxQuizTypesPerFlashcard"];
            this.minCompletedQuizzesPerCent = _data["minCompletedQuizzesPerCent"];
            this.order = _data["order"];
            this.includeMeanings = _data["includeMeanings"];
            if (Array.isArray(_data["properties"])) {
                this.properties = [] as any;
                for (let item of _data["properties"])
                    this.properties!.push(CustomPropertyDto.fromJS(item));
            }
            if (Array.isArray(_data["quizTypes"])) {
                this.quizTypes = [] as any;
                for (let item of _data["quizTypes"])
                    this.quizTypes!.push(QuizTypeDto.fromJS(item));
            }
            this.completedFlashcardsCount = _data["completedFlashcardsCount"];
            this.allFlashcardsCount = _data["allFlashcardsCount"];
            this.lastSeenOn = _data["lastSeenOn"] ? new Date(_data["lastSeenOn"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AttemptDto {
        data = typeof data === 'object' ? data : {};
        let result = new AttemptDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["collectionId"] = this.collectionId;
        data["collectionName"] = this.collectionName;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
        data["currentStage"] = this.currentStage ? this.currentStage.toJSON() : <any>undefined;
        data["maxFlashcardsPerStage"] = this.maxFlashcardsPerStage;
        data["maxQuizTypesPerFlashcard"] = this.maxQuizTypesPerFlashcard;
        data["minCompletedQuizzesPerCent"] = this.minCompletedQuizzesPerCent;
        data["order"] = this.order;
        data["includeMeanings"] = this.includeMeanings;
        if (Array.isArray(this.properties)) {
            data["properties"] = [];
            for (let item of this.properties)
                data["properties"].push(item.toJSON());
        }
        if (Array.isArray(this.quizTypes)) {
            data["quizTypes"] = [];
            for (let item of this.quizTypes)
                data["quizTypes"].push(item.toJSON());
        }
        data["completedFlashcardsCount"] = this.completedFlashcardsCount;
        data["allFlashcardsCount"] = this.allFlashcardsCount;
        data["lastSeenOn"] = this.lastSeenOn ? this.lastSeenOn.toISOString() : <any>undefined;
        return data;
    }
}

export interface IAttemptDto {
    id: string;
    name: string;
    collectionId: string;
    collectionName: string;
    createdOn: Date;
    currentStage?: AttemptStageDto | undefined;
    maxFlashcardsPerStage: number;
    maxQuizTypesPerFlashcard: number;
    minCompletedQuizzesPerCent: number;
    order: FlashcardOrder;
    includeMeanings: boolean;
    properties?: CustomPropertyDto[] | undefined;
    quizTypes?: QuizTypeDto[] | undefined;
    completedFlashcardsCount: number;
    allFlashcardsCount: number;
    lastSeenOn?: Date | undefined;
}

export class AttemptStageDto implements IAttemptStageDto {
    id!: string;
    stage!: AttemptStageType;
    flashcards?: FlashcardStateDto[] | undefined;

    constructor(data?: IAttemptStageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.stage = _data["stage"];
            if (Array.isArray(_data["flashcards"])) {
                this.flashcards = [] as any;
                for (let item of _data["flashcards"])
                    this.flashcards!.push(FlashcardStateDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AttemptStageDto {
        data = typeof data === 'object' ? data : {};
        let result = new AttemptStageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["stage"] = this.stage;
        if (Array.isArray(this.flashcards)) {
            data["flashcards"] = [];
            for (let item of this.flashcards)
                data["flashcards"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAttemptStageDto {
    id: string;
    stage: AttemptStageType;
    flashcards?: FlashcardStateDto[] | undefined;
}

export enum AttemptStageType {
    Init = 0,
    InProgress = 1,
    Complete = 2,
}

export class FlashcardStateDto implements IFlashcardStateDto {
    id!: string;
    flashcard?: FlashcardDto | undefined;

    constructor(data?: IFlashcardStateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.flashcard = _data["flashcard"] ? FlashcardDto.fromJS(_data["flashcard"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FlashcardStateDto {
        data = typeof data === 'object' ? data : {};
        let result = new FlashcardStateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["flashcard"] = this.flashcard ? this.flashcard.toJSON() : <any>undefined;
        return data;
    }
}

export interface IFlashcardStateDto {
    id: string;
    flashcard?: FlashcardDto | undefined;
}

export class FlashcardDto implements IFlashcardDto {
    id!: string;
    collectionId!: string;
    collectionName!: string;
    wordOrPhrase!: string;
    meanings!: MeaningDto[];
    createdOn!: Date;
    lastSeenOn?: Date | undefined;
    flashcardBaseId!: string;

    constructor(data?: IFlashcardDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.meanings = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.collectionId = _data["collectionId"];
            this.collectionName = _data["collectionName"];
            this.wordOrPhrase = _data["wordOrPhrase"];
            if (Array.isArray(_data["meanings"])) {
                this.meanings = [] as any;
                for (let item of _data["meanings"])
                    this.meanings!.push(MeaningDto.fromJS(item));
            }
            this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : <any>undefined;
            this.lastSeenOn = _data["lastSeenOn"] ? new Date(_data["lastSeenOn"].toString()) : <any>undefined;
            this.flashcardBaseId = _data["flashcardBaseId"];
        }
    }

    static fromJS(data: any): FlashcardDto {
        data = typeof data === 'object' ? data : {};
        let result = new FlashcardDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["collectionId"] = this.collectionId;
        data["collectionName"] = this.collectionName;
        data["wordOrPhrase"] = this.wordOrPhrase;
        if (Array.isArray(this.meanings)) {
            data["meanings"] = [];
            for (let item of this.meanings)
                data["meanings"].push(item.toJSON());
        }
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
        data["lastSeenOn"] = this.lastSeenOn ? this.lastSeenOn.toISOString() : <any>undefined;
        data["flashcardBaseId"] = this.flashcardBaseId;
        return data;
    }
}

export interface IFlashcardDto {
    id: string;
    collectionId: string;
    collectionName: string;
    wordOrPhrase: string;
    meanings: MeaningDto[];
    createdOn: Date;
    lastSeenOn?: Date | undefined;
    flashcardBaseId: string;
}

export class MeaningDto implements IMeaningDto {
    id!: string;
    value!: string;

    constructor(data?: IMeaningDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): MeaningDto {
        data = typeof data === 'object' ? data : {};
        let result = new MeaningDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["value"] = this.value;
        return data;
    }
}

export interface IMeaningDto {
    id: string;
    value: string;
}

export enum FlashcardOrder {
    AlphabeticalDesc = 0,
    AlphabeticalAsc = 1,
    CreationDateDesc = 2,
    CreationDateAsc = 3,
    Random = 4,
}

export class CustomPropertyDto implements ICustomPropertyDto {

    constructor(data?: ICustomPropertyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): CustomPropertyDto {
        data = typeof data === 'object' ? data : {};
        let result = new CustomPropertyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface ICustomPropertyDto {
}

export class QuizTypeDto implements IQuizTypeDto {
    name!: string;
    instruction!: string;
    isSelect!: boolean;
    isMultiselect!: boolean;
    isSelectCorrect!: boolean;
    isSelectMissing!: boolean;
    isMatch!: boolean;
    isArrange!: boolean;
    isInput!: boolean;
    isFillInBlank!: boolean;

    constructor(data?: IQuizTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.instruction = _data["instruction"];
            this.isSelect = _data["isSelect"];
            this.isMultiselect = _data["isMultiselect"];
            this.isSelectCorrect = _data["isSelectCorrect"];
            this.isSelectMissing = _data["isSelectMissing"];
            this.isMatch = _data["isMatch"];
            this.isArrange = _data["isArrange"];
            this.isInput = _data["isInput"];
            this.isFillInBlank = _data["isFillInBlank"];
        }
    }

    static fromJS(data: any): QuizTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new QuizTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["instruction"] = this.instruction;
        data["isSelect"] = this.isSelect;
        data["isMultiselect"] = this.isMultiselect;
        data["isSelectCorrect"] = this.isSelectCorrect;
        data["isSelectMissing"] = this.isSelectMissing;
        data["isMatch"] = this.isMatch;
        data["isArrange"] = this.isArrange;
        data["isInput"] = this.isInput;
        data["isFillInBlank"] = this.isFillInBlank;
        return data;
    }
}

export interface IQuizTypeDto {
    name: string;
    instruction: string;
    isSelect: boolean;
    isMultiselect: boolean;
    isSelectCorrect: boolean;
    isSelectMissing: boolean;
    isMatch: boolean;
    isArrange: boolean;
    isInput: boolean;
    isFillInBlank: boolean;
}

export class AddAttemptDto implements IAddAttemptDto {
    name!: string;
    collectionId!: string;
    maxFlashcardsPerStage!: number;
    maxQuizTypesPerFlashcard!: number;
    minCompletedQuizzesPerCent!: number;
    order!: FlashcardOrder;
    includeMeanings!: boolean;
    properties?: CustomPropertyDto[] | undefined;
    quizTypes?: QuizTypeDto[] | undefined;

    constructor(data?: IAddAttemptDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.collectionId = _data["collectionId"];
            this.maxFlashcardsPerStage = _data["maxFlashcardsPerStage"];
            this.maxQuizTypesPerFlashcard = _data["maxQuizTypesPerFlashcard"];
            this.minCompletedQuizzesPerCent = _data["minCompletedQuizzesPerCent"];
            this.order = _data["order"];
            this.includeMeanings = _data["includeMeanings"];
            if (Array.isArray(_data["properties"])) {
                this.properties = [] as any;
                for (let item of _data["properties"])
                    this.properties!.push(CustomPropertyDto.fromJS(item));
            }
            if (Array.isArray(_data["quizTypes"])) {
                this.quizTypes = [] as any;
                for (let item of _data["quizTypes"])
                    this.quizTypes!.push(QuizTypeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AddAttemptDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddAttemptDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["collectionId"] = this.collectionId;
        data["maxFlashcardsPerStage"] = this.maxFlashcardsPerStage;
        data["maxQuizTypesPerFlashcard"] = this.maxQuizTypesPerFlashcard;
        data["minCompletedQuizzesPerCent"] = this.minCompletedQuizzesPerCent;
        data["order"] = this.order;
        data["includeMeanings"] = this.includeMeanings;
        if (Array.isArray(this.properties)) {
            data["properties"] = [];
            for (let item of this.properties)
                data["properties"].push(item.toJSON());
        }
        if (Array.isArray(this.quizTypes)) {
            data["quizTypes"] = [];
            for (let item of this.quizTypes)
                data["quizTypes"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAddAttemptDto {
    name: string;
    collectionId: string;
    maxFlashcardsPerStage: number;
    maxQuizTypesPerFlashcard: number;
    minCompletedQuizzesPerCent: number;
    order: FlashcardOrder;
    includeMeanings: boolean;
    properties?: CustomPropertyDto[] | undefined;
    quizTypes?: QuizTypeDto[] | undefined;
}

export class NextExerciseDto implements INextExerciseDto {
    isStageComplete?: boolean | undefined;
    exerciseDto?: ExerciseDto | undefined;

    constructor(data?: INextExerciseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isStageComplete = _data["isStageComplete"];
            this.exerciseDto = _data["exerciseDto"] ? ExerciseDto.fromJS(_data["exerciseDto"]) : <any>undefined;
        }
    }

    static fromJS(data: any): NextExerciseDto {
        data = typeof data === 'object' ? data : {};
        let result = new NextExerciseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isStageComplete"] = this.isStageComplete;
        data["exerciseDto"] = this.exerciseDto ? this.exerciseDto.toJSON() : <any>undefined;
        return data;
    }
}

export interface INextExerciseDto {
    isStageComplete?: boolean | undefined;
    exerciseDto?: ExerciseDto | undefined;
}

export class ExerciseDto implements IExerciseDto {
    attemptId!: string;
    flashcardStateId!: string;
    instruction!: string;
    wordOrPhrase!: string;
    correctAnswers!: AnswerDto[];
    incorrectAnswers!: AnswerDto[];
    isSingleSelect!: boolean;
    isMultiSelect!: boolean;
    isSelectMissing!: boolean;
    isMatch!: boolean;
    isArrange!: boolean;
    isInput!: boolean;
    isFillInBlank!: boolean;

    constructor(data?: IExerciseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.correctAnswers = [];
            this.incorrectAnswers = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.attemptId = _data["attemptId"];
            this.flashcardStateId = _data["flashcardStateId"];
            this.instruction = _data["instruction"];
            this.wordOrPhrase = _data["wordOrPhrase"];
            if (Array.isArray(_data["correctAnswers"])) {
                this.correctAnswers = [] as any;
                for (let item of _data["correctAnswers"])
                    this.correctAnswers!.push(AnswerDto.fromJS(item));
            }
            if (Array.isArray(_data["incorrectAnswers"])) {
                this.incorrectAnswers = [] as any;
                for (let item of _data["incorrectAnswers"])
                    this.incorrectAnswers!.push(AnswerDto.fromJS(item));
            }
            this.isSingleSelect = _data["isSingleSelect"];
            this.isMultiSelect = _data["isMultiSelect"];
            this.isSelectMissing = _data["isSelectMissing"];
            this.isMatch = _data["isMatch"];
            this.isArrange = _data["isArrange"];
            this.isInput = _data["isInput"];
            this.isFillInBlank = _data["isFillInBlank"];
        }
    }

    static fromJS(data: any): ExerciseDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExerciseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attemptId"] = this.attemptId;
        data["flashcardStateId"] = this.flashcardStateId;
        data["instruction"] = this.instruction;
        data["wordOrPhrase"] = this.wordOrPhrase;
        if (Array.isArray(this.correctAnswers)) {
            data["correctAnswers"] = [];
            for (let item of this.correctAnswers)
                data["correctAnswers"].push(item.toJSON());
        }
        if (Array.isArray(this.incorrectAnswers)) {
            data["incorrectAnswers"] = [];
            for (let item of this.incorrectAnswers)
                data["incorrectAnswers"].push(item.toJSON());
        }
        data["isSingleSelect"] = this.isSingleSelect;
        data["isMultiSelect"] = this.isMultiSelect;
        data["isSelectMissing"] = this.isSelectMissing;
        data["isMatch"] = this.isMatch;
        data["isArrange"] = this.isArrange;
        data["isInput"] = this.isInput;
        data["isFillInBlank"] = this.isFillInBlank;
        return data;
    }
}

export interface IExerciseDto {
    attemptId: string;
    flashcardStateId: string;
    instruction: string;
    wordOrPhrase: string;
    correctAnswers: AnswerDto[];
    incorrectAnswers: AnswerDto[];
    isSingleSelect: boolean;
    isMultiSelect: boolean;
    isSelectMissing: boolean;
    isMatch: boolean;
    isArrange: boolean;
    isInput: boolean;
    isFillInBlank: boolean;
}

export class AnswerDto implements IAnswerDto {
    value!: string;

    constructor(data?: IAnswerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): AnswerDto {
        data = typeof data === 'object' ? data : {};
        let result = new AnswerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data;
    }
}

export interface IAnswerDto {
    value: string;
}

export class CollectionCardDto implements ICollectionCardDto {
    id!: string;
    title!: string;
    subcollectionsCount!: number;
    flashcardsCount!: number;

    constructor(data?: ICollectionCardDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.subcollectionsCount = _data["subcollectionsCount"];
            this.flashcardsCount = _data["flashcardsCount"];
        }
    }

    static fromJS(data: any): CollectionCardDto {
        data = typeof data === 'object' ? data : {};
        let result = new CollectionCardDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["subcollectionsCount"] = this.subcollectionsCount;
        data["flashcardsCount"] = this.flashcardsCount;
        return data;
    }
}

export interface ICollectionCardDto {
    id: string;
    title: string;
    subcollectionsCount: number;
    flashcardsCount: number;
}

export class CollectionDto implements ICollectionDto {
    id!: string;
    name!: string;
    parentId?: string | undefined;
    parentName?: string | undefined;
    subcollections?: CollectionCardDto[] | undefined;
    flashcards?: FlashcardDto[] | undefined;

    constructor(data?: ICollectionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.parentName = _data["parentName"];
            if (Array.isArray(_data["subcollections"])) {
                this.subcollections = [] as any;
                for (let item of _data["subcollections"])
                    this.subcollections!.push(CollectionCardDto.fromJS(item));
            }
            if (Array.isArray(_data["flashcards"])) {
                this.flashcards = [] as any;
                for (let item of _data["flashcards"])
                    this.flashcards!.push(FlashcardDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CollectionDto {
        data = typeof data === 'object' ? data : {};
        let result = new CollectionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["parentName"] = this.parentName;
        if (Array.isArray(this.subcollections)) {
            data["subcollections"] = [];
            for (let item of this.subcollections)
                data["subcollections"].push(item.toJSON());
        }
        if (Array.isArray(this.flashcards)) {
            data["flashcards"] = [];
            for (let item of this.flashcards)
                data["flashcards"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICollectionDto {
    id: string;
    name: string;
    parentId?: string | undefined;
    parentName?: string | undefined;
    subcollections?: CollectionCardDto[] | undefined;
    flashcards?: FlashcardDto[] | undefined;
}

export class CreateCollectionDto implements ICreateCollectionDto {
    name!: string;
    parentCollectionId?: string | undefined;

    constructor(data?: ICreateCollectionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.parentCollectionId = _data["parentCollectionId"];
        }
    }

    static fromJS(data: any): CreateCollectionDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCollectionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["parentCollectionId"] = this.parentCollectionId;
        return data;
    }
}

export interface ICreateCollectionDto {
    name: string;
    parentCollectionId?: string | undefined;
}

export class UpdateCollectionDto implements IUpdateCollectionDto {
    id!: string;
    name!: string;
    parentCollectionId?: string | undefined;

    constructor(data?: IUpdateCollectionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.parentCollectionId = _data["parentCollectionId"];
        }
    }

    static fromJS(data: any): UpdateCollectionDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCollectionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["parentCollectionId"] = this.parentCollectionId;
        return data;
    }
}

export interface IUpdateCollectionDto {
    id: string;
    name: string;
    parentCollectionId?: string | undefined;
}

export class CollectionAutocompleteDto implements ICollectionAutocompleteDto {
    id!: string;
    name!: string;

    constructor(data?: ICollectionAutocompleteDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CollectionAutocompleteDto {
        data = typeof data === 'object' ? data : {};
        let result = new CollectionAutocompleteDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface ICollectionAutocompleteDto {
    id: string;
    name: string;
}

export class AddOrUpdateFlashcardDto implements IAddOrUpdateFlashcardDto {
    flashcardId?: string | undefined;
    collectionId!: string;
    flashcardBaseId?: string | undefined;
    wordOrPhrase!: string;
    meanings!: AddOrUpdateMeaningDto[];

    constructor(data?: IAddOrUpdateFlashcardDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.meanings = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.flashcardId = _data["flashcardId"];
            this.collectionId = _data["collectionId"];
            this.flashcardBaseId = _data["flashcardBaseId"];
            this.wordOrPhrase = _data["wordOrPhrase"];
            if (Array.isArray(_data["meanings"])) {
                this.meanings = [] as any;
                for (let item of _data["meanings"])
                    this.meanings!.push(AddOrUpdateMeaningDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AddOrUpdateFlashcardDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateFlashcardDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["flashcardId"] = this.flashcardId;
        data["collectionId"] = this.collectionId;
        data["flashcardBaseId"] = this.flashcardBaseId;
        data["wordOrPhrase"] = this.wordOrPhrase;
        if (Array.isArray(this.meanings)) {
            data["meanings"] = [];
            for (let item of this.meanings)
                data["meanings"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAddOrUpdateFlashcardDto {
    flashcardId?: string | undefined;
    collectionId: string;
    flashcardBaseId?: string | undefined;
    wordOrPhrase: string;
    meanings: AddOrUpdateMeaningDto[];
}

export class AddOrUpdateMeaningDto implements IAddOrUpdateMeaningDto {
    id?: string | undefined;
    value!: string;

    constructor(data?: IAddOrUpdateMeaningDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): AddOrUpdateMeaningDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddOrUpdateMeaningDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["value"] = this.value;
        return data;
    }
}

export interface IAddOrUpdateMeaningDto {
    id?: string | undefined;
    value: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}